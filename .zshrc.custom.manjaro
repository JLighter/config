export GOPATH=$HOME/Documents/Personal/Go
export GOBIN=$HOME/.local/go/bin

export BAT_THEME="gruvbox-dark"


# Use infogerence aliases
if [ -f "$HOME/.ssh_aliases" ]; then
    source $HOME/.ssh_aliases
fi

# Kubectl and minikube autocompletion
if command -v kubectl &>/dev/null; then
  source <(kubectl completion zsh)
fi
if command -v minikube &>/dev/null; then
  eval "$(minikube completion zsh)"
fi
if command -v kind &>/dev/null; then
  source <(kind completion zsh)
fi

# Helm completion
if command -v helm &>/dev/null; then
  eval "$(helm completion zsh)"
fi

# Terraform completion
if command -v terraform &>/dev/null; then
  autoload -U +X bashcompinit && bashcompinit
  complete -o nospace -C $(which terraform) terraform
fi

# AWS completion
if command -v aws &>/dev/null; then
  autoload bashcompinit && bashcompinit
  complete -C $(which aws_completer) aws
fi

if command -v mvn &>/dev/null; then
  export JAVA_HOME=/usr/lib/jvm/java-17-openjdk
fi

# Kind
if command -v kind &>/dev/null; then
  source <(kind completion zsh)
fi

# KNative
if command -v kn &>/dev/null; then
  source <(kn completion zsh)
fi

if command -v az &>/dev/null; then
  source /opt/homebrew/etc/bash_completion.d/az
fi

if [[ -d ~/.local/bin ]] then
  export PATH=$PATH:~/.local/bin
fi

if [[ -d ~/.bun ]] then
  export PATH=$PATH:~/.bun/bin
fi

# AWS completion
if command -v aws &>/dev/null; then
  export PATH=$PATH:/home/jlighter/.local/lib/aws/bin
  autoload bashcompinit && bashcompinit
  complete -C '/home/jlighter/.local/lib/aws/bin/aws_completer' aws
fi

alias john=$HOME/.local/bin/john/john

# Use powerline
USE_POWERLINE="true"
# Source manjaro-zsh-configuration
if [[ -e /usr/share/zsh/manjaro-zsh-config ]]; then
  source /usr/share/zsh/manjaro-zsh-config
fi

# Use manjaro zsh prompt
if [[ -e /usr/share/zsh/manjaro-zsh-prompt ]]; then
  source /usr/share/zsh/manjaro-zsh-prompt
fi

export PATH=$PATH:~/.npm-globals/bin

export K9S_CONFIG_DIR=$HOME/.config/k9s

export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"

plugins=(git docker docker-compose node tmux)
